// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  donates       Donate[]
  Receveid      Receveid[]
  Location      Location[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Donate {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  status      String     @default("a caminho")
  description String
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  Receveid    Receveid[]
  Location    Location[]
  Image       Image[]
}

model Receveid {
  id       String @id @default(cuid())
  message  String
  userId   String
  donateId String @unique
  user     User   @relation(fields: [userId], references: [id])
  donate   Donate @relation(fields: [donateId], references: [id])
}

model Location {
  id       String @id @default(cuid())
  local    String
  lat      Float?
  lng      Float?
  userId   String
  donateId String
  user     User   @relation(fields: [userId], references: [id])
  donate   Donate @relation(fields: [donateId], references: [id])
}

model Image {
  id       String  @id @default(cuid())
  donateId String
  publicId String
  donate   Donate? @relation(fields: [donateId], references: [id])
}
